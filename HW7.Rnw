\documentclass{article}
\usepackage[margin=1.0in]{geometry} % To set margins
\usepackage{amsmath}  % This allows me to use the align functionality.
                      % If you find yourself trying to replicate
                      % something you found online, ensure you're
                      % loading the necessary packages!
\usepackage{amsfonts} % Math font
\usepackage{fancyvrb}
\usepackage{hyperref} % For including hyperlinks
\usepackage[shortlabels]{enumitem}% For enumerated lists with labels specified
                                  % We had to run tlmgr_install("enumitem") in R
\usepackage{float}    % For telling R where to put a table/figure
\usepackage{natbib}        %For the bibliography
\bibliographystyle{apalike}%For the bibliography

\begin{document}
\begin{enumerate}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Question 1
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\item Write a \texttt{pois.prob()} function that computes $P(X=x)$, $P(X \neq x)$, $P(X<x)$, $P(X \leq x)$, $P(X > x)$, and $P(X \geq x).$ Enable the user to specify the rate parameter $\lambda$.

\textbf{Explanation:} Here is the code to calculate various probabilities for a Poisson distribution. I changed the \texttt{size} and \texttt{prob} parameters to \texttt{$\lambda$}. The function takes in a support \texttt{x} which is greater than or equal 0 and \texttt{$\lambda$} which is a value greater than or equal 0. The default \texttt{type} for the function is $\leq$.
<<size="scriptsize", eval = F>>=
pois.prob <- function(x, lambda, type="<="){
  # Use dpois and ppois to conditionally return the correct probability
  
  p.eq <- dpois(x, lambda)     # P(X = x)
  p.neq <- 1 - p.eq            # P(X != x)
  p.lt <- ppois(x - 1, lambda) # P(X < x)
  p.lte <- ppois(x, lambda)    # P(X <= x)
  p.gt  <- 1 - p.lte           # P(X > x)
  p.gte  <- 1 - p.lt           # P(X >= x)
  
  if (type == "=") {
    return(p.eq)
  }
  else if (type == "!=") {
    return(p.neq)
  }
  else if (type == "<") {
    return(p.lt)
  }
  else if (type == "<=") {
    return(p.lte)
  }
  else if (type == ">") {
    return(p.gt)
  }
  else if (type == ">=") {
    return(p.gte)
  }
}
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Question 2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\item Write a \texttt{beta.prob()} function that computes $P(X=x)$, 
$P(X \neq x)$, $P(X<x)$, $P(X \leq x)$, $P(X > x)$, and $P(X \geq x)$
for a beta distribution. Enable the user to specify the shape parameters
$\alpha$ and $\beta$.

\textbf{Explanation:} Here is the code to calculate various probabilities for a Beta distribution. I changed the \texttt{size} and \texttt{prob} parameters to \texttt{alpha} and \texttt{beta}. The function takes in a support \texttt{x} which is 0 $\leq$ \texttt{x} $\leq$ 1 and \texttt{alpha} and \texttt{beta} which are both values greater than or equal 0. The default \texttt{type} for the function is $\leq$. The output for $P(X=x)$ and $P(X \neq x)$ were hardcoded as 0 and 1, respectively. The $P(X<x)$ and $P(X \leq x)$ condition and the $P(X > x)$ and $P(X \geq x)$ condition were combined as the equal to becomes irrelevant when considering a continuous distribution.

<<size="scriptsize", eval = F>>=
beta.prob <- function(x, alpha, beta, type="<="){
  # Use dbeta and pbeta to conditionally return the correct probability
  
  if (type == "="){ #P(X = x)
    return(0) 
  }
  else if (type == "!="){ #P(X != x)
    return(1)
  }
  else if(type == "<" | type == "<="){ #P(X < x) or P(X <= x)
    return(pbeta(x, alpha, beta))
  }
  else if (type == ">" | type == ">="){ #P(X > x) or P(X >= x)
    return(1 - pbeta(x, alpha, beta))
  }
}
@

\end{enumerate}
\bibliography{bibliography}
\end{document}
